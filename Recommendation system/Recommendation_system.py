# -*- coding: utf-8 -*-
"""RECOMMENDATION SYSTEM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/119gjKynD6EnDn0-Ewzw1q5oYUKocXwQJ
"""

#using tensor flow and Numpy

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
import warnings
#from tensorflow.keras.models import Sequential
#from tensorflow.keras.layers import LSTM, Dense, Dropout
import json
import os
from datetime import datetime

import warnings
warnings.filterwarnings("ignore")

from plotly import express, graph_objects, subplots, io
io.templates.default = 'plotly_dark'
from collections import defaultdict

data1 = pd.read_csv('final_result.csv')

data1.info()

data = data1.drop(['category_date_added', 'Unnamed: 0'], axis=1)

data['date_added'] = pd.to_datetime(data['date_added'])

data['year'] = data['date_added'].dt.year
data['month'] = data['date_added'].dt.month

#EDA for years
def monthly(data, year_n, month_n):
  month = data[(data['year']==year_n) & (data['month']==month_n)]

  #frequncy of categories monthly( most recurring)
  month_rec = month[['category_name','month', 'amount', 'source_name']]
  month_rec1 = month_rec.value_counts()
  print(f'The frequency of your category for year {month_n} is: \n {month_rec1}')
  print('\n')

  #category most spent on and the amount
  max_amt = month_rec.sort_values(by ='amount', ascending = False)
  max_rec = max_amt.head(1)
  print(f'Category of the highest spent and the amount is: \n {max_rec}')
  print('\n')

  # Monthly Total amount spent on each unique category
  food_drink1 = month_rec[month_rec['category_name']=='food and drinks']
  food_drink= np.sum(food_drink1['amount'])
  print(f'Total amount spent on food and drinks for this month is: {food_drink}')
  print('\n')

  clothing1 = month_rec[month_rec['category_name']=='clothings']
  clothe= np.sum(clothing1['amount'])
  print(f'Total amount spent on clothings for this month is: {clothe}')
  print('\n')

  entertain1 = month_rec[month_rec['category_name']=='entertainment']
  entertain= np.sum(entertain1['amount'])
  print(f'Total amount spent on entertainment for this month is: {entertain}')
  print('\n')

  # visualization of categories based on their percentages
  categories= [food_drink, clothe, entertain]
  keys= ['Food and Drinks', 'Clothings', 'Entertainments']
  palette_colour = sns.color_palette('bright')

  plt.pie(categories, labels=keys, colors=palette_colour, autopct='%.0f%%')
  plt.show()
  print('\n')

  #Visualization of the categories
  sns.countplot(x = 'category_name', data= month_rec, palette = 'Set2')
  plt.legend()
  plt.title(f'visualization for month {month_n}/ {year_n}')
  plt.show()

monthly(data, 2021, 4)

#EDA for years
def year(data, year_n):
  year = data.loc[data['year']==year_n]

  #frequncy of categories yearly( most recurring)
  year_rec = year[['category_name','year', 'amount','source_name']]
  year_rec1 = year_rec.value_counts()
  print(f'the frequency of your category for year {year_n} is: \n {year_rec1}')
  print('\n')

  #category most spent on and the amount
  max_amt = year_rec.sort_values(by= 'amount', ascending = False)
  max_rec = max_amt.head(1)
  print(f'Category of the highest spent and the amount is: \n {max_rec}')
  print('\n')

  # Monthly Total amount spent on each unique category
  food_drink1 = year_rec[year_rec['category_name']=='food and drinks']
  food_drink= np.sum(food_drink1['amount'])
  print(f'Total amount spent on food and drinks for year {year_n} is: {food_drink}')
  print('\n')

  clothing1 = year_rec[year_rec['category_name']=='clothings']
  clothe= np.sum(clothing1['amount'])
  print(f'Total amount spent on clothings for year {year_n} is: {clothe}')
  print('\n')

  entertain1 = year_rec[year_rec['category_name']=='entertainment']
  entertain= np.sum(entertain1['amount'])
  print(f'Total amount spent on entertainment for year{year_n} is: {entertain}')
  print('\n')

  # visualization of categories based on their percentages
  categories= [food_drink, clothe, entertain]
  keys= ['Food and Drinks', 'Clothings', 'Entertainments']
  palette_colour = sns.color_palette('bright')


  plt.rcParams["figure.figsize"] = [4, 4]
  plt.rcParams["figure.autolayout"] = True
  plt.pie(categories, labels=keys, colors=palette_colour, autopct='%.0f%%',startangle= 90, radius=1.2)
  #plt.figure(figsize=(9, 9))
  plt.title('visualization of categories based on their percentages')
  plt.legend(categories, loc='upper left', fontsize=5)
  plt.show()
  print('\n')


  #Visualization of the categories
  sns.countplot(x = 'category_name', data= year_rec, palette = 'Set2')
  plt.legend()
  plt.title(f'visualization for year {year_n}')
  plt.show()

year(data, 2023)

#budget based on recuriing categories

def sub_user(data,year_n, monthly_n, monthly1_n):
  month = data[(data['year']==year_n) & (data['month']==monthly_n)]
  month1 = data[(data['year']==year_n) & (data['month']==monthly1_n)]

  #frequncy of categories for 2 months ( most recurring)
  sub_rec = month[['category_name','month', 'amount', 'source_name']]
  sub_rec1 = sub_rec.value_counts().iloc[ :1]
  ###print(f'The frequency of your category for month {monthly_n} in the year {year_n} is: \n {sub_rec1}')

  print('\n')

  sub_recs = month1[['category_name','month', 'amount', 'source_name']]
  sub_recs1 = sub_recs.value_counts().iloc[:1]
  ####print(f'The frequency of your category for month {monthly1_n} in the year {year_n} is: \n {sub_recs1}')
  print('\n')

  #merge both results and convert to a dataframe for comparison
  subscript = pd.concat([sub_rec1, sub_recs1], axis=0)
  subs = subscript.to_csv('subscription.csv')
  subscription = pd.read_csv('subscription.csv')
  subscription.rename(columns = {'0':'frequency'}, inplace = True)

  a= subscription.iloc[0,0]
  b =subscription.iloc[1,0]

  if (a == b):
    print (f'To Budget for {a} which is your most reccuring category over the past two months, click the botton yes')
  else:
    print(f'To Budget for {a} and {b} which are your most reccuring categories over the past two months, click yes')

#for subscription

def detect_recurring_bill(data, year_n, tolerance=0.1, consecutive_months=12):
    year_slice = data[data['year']==year_n]
    year = year_slice[['category_name','date_added', 'amount', 'source_name']]

    # Group transactions by category
    categories = defaultdict(list)
    for _, row in year.iterrows():
        amount, category, date = row["amount"], row["category_name"], row["date_added"]
        categories[category].append((amount, date))

    # Sort transactions by date for each category
    for category in categories:
        categories[category].sort(key=lambda x: x[1])

    # Detect recurring bills
    recurring_bills = []
    for category, category_transactions in categories.items():
        recurring_count = 1
        prev_amount, prev_date = category_transactions[0]
        for current_amount, current_date in category_transactions[1:]:
            # Check if the current transaction is similar to the previous one
            if abs(current_amount - prev_amount) / prev_amount <= tolerance and \
                    (current_date.month - prev_date.month == 1 or
                     (current_date.year - prev_date.year == 1 and
                      (current_date.month == 1 and prev_date.month == 12))):
                recurring_count += 1
            else:
                recurring_count = 1
            # If we find consecutive recurring transactions, add them to recurring_bills
            if recurring_count == consecutive_months:
                recurring_bills.append((category, prev_amount))

            prev_amount, prev_date = current_amount, current_date

    return recurring_bills

recurring_bills = detect_recurring_bill(data, 2021)

#suggesting subs to users
def suggest_subscription(recurring_bills):
    suggestions = []
    for category, amount in recurring_bills:
        subscription = f"{category} Subscription"
        suggestions.append((subscription, amount))
    return suggestions

suggest_sub = suggest_subscription(recurring_bills)

print("Recurring Bills:")
for category, amount in recurring_bills:
    print(f"{category}: {amount:.2f}")

print("\nSuggested Subscriptions:")
for subscription, amount in suggest_sub :
    print(f"{subscription}: {amount:.2f}")